import asyncio
import logging
import uuid
import os
from langgraph.errors import GraphRecursionError
from langchain_core.messages import HumanMessage, AIMessage, BaseMessage
from typing import List, Dict, Any, Optional

from telegram import Update
from telegram.ext import (
    Application,
    MessageHandler,
    filters,
    ContextTypes,
    CommandHandler,
)

from config.settings import settings
from agent_core.agent_graph import get_compiled_agent_graph
from agent_core.agent_state import AgentState

logging.basicConfig(
    level=settings.LOG_LEVEL.upper(),
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler()],
)
logger = logging.getLogger(__name__)

compiled_agent = get_compiled_agent_graph()
user_sessions: Dict[int, str] = {}


async def handle_telegram_message(
    chat_id: int, user_message_text: str
) -> Optional[str]:
    logger.info(f"Handling message from chat_id {chat_id}: '{user_message_text}'")

    if chat_id not in user_sessions:
        user_sessions[chat_id] = str(uuid.uuid4())
        logger.info(
            f"New LangGraph session for chat_id {chat_id}, thread_id: {user_sessions[chat_id]}"
        )
    thread_id = user_sessions[chat_id]
    logger.info(
        f"Using LangGraph session (thread_id) for chat_id {chat_id}: {thread_id}"
    )

    inputs = {"messages": [HumanMessage(content=user_message_text)]}
    config = {"configurable": {"thread_id": thread_id}}
    agent_response_text: Optional[str] = None

    try:
        logger.debug(
            f"Invoking agent for thread_id {thread_id} with input: '{user_message_text}'"
        )

        final_node_output: Optional[AgentState] = None
        async for output_chunk in compiled_agent.astream(
            inputs, config, stream_mode="values"
        ):
            # output_chunk –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —É–∑–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–µ—Ä–Ω—É–ª –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ç–µ–º,
            # –∫–∞–∫ –≥—Ä–∞—Ñ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è (–¥–æ—à–µ–ª –¥–æ END) –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É —ç—Ç–æ–≥–æ —Ç–∏–∫–∞.
            final_node_output = output_chunk  # type: ignore
            node_name = final_node_output.get("__node__", "UnknownNode") if final_node_output else "NoOutput"  # type: ignore
            logger.debug(
                f"Intermediate/Final node output for thread_id {thread_id}: node={node_name}, state_keys={list(final_node_output.keys()) if final_node_output else 'None'}"
            )

        # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è astream, final_node_output —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ —É–∑–ª–∞ –ø–µ—Ä–µ–¥ END
        # –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–∑–ª–∞ –≤ —Ü–µ–ø–æ—á–∫–µ, –µ—Å–ª–∏ –≥—Ä–∞—Ñ –Ω–µ –¥–æ—à–µ–ª –¥–æ END, –∞ –ø—Ä–æ—Å—Ç–æ –æ–∂–∏–¥–∞–µ—Ç (—á—Ç–æ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç—Å—è –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ä–µ–±—Ä–∞ –≤ END)

        if final_node_output:
            agent_response_text = final_node_output.get("status_message_to_user")

            # –ï—Å–ª–∏ status_message_to_user –ø—É—Å—Ç, –ø—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ AI —Å–æ–æ–±—â–µ–Ω–∏–µ
            if not agent_response_text:
                messages_history: List[BaseMessage] = final_node_output.get("messages", [])  # type: ignore
                if messages_history and isinstance(messages_history[-1], AIMessage):
                    agent_response_text = messages_history[-1].content
                    logger.info(
                        f"Using last AI message as response for thread_id {thread_id}: {str(agent_response_text)[:100]}"
                    )

            if not agent_response_text:
                logger.warning(
                    f"No status_message_to_user and no last AIMessage for thread_id {thread_id}. State: {str(final_node_output)[:300]}"
                )
                agent_response_text = (
                    "–ö–∞–∂–µ—Ç—Å—è, —è —Å–µ–π—á–∞—Å –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –≥—Ä–∞—Ñ –∑–∞–≤–µ—Ä—à–∏–ª —Å–≤–æ—é —Ä–∞–±–æ—Ç—É –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
            # –≠—Ç–æ –ø–æ–ª–µ–∑–Ω–æ, –µ—Å–ª–∏ –µ—Å—Ç—å —É–∑–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø—Ä–∏–≤–æ–¥–∏—Ç—å –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å,
            # –Ω–æ –≥—Ä–∞—Ñ —Å–∞–º –ø–æ —Å–µ–±–µ –µ—â–µ –Ω–µ "–∑–∞–∫–æ–Ω—á–∏–ª—Å—è" –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –Ω–µ –≤—Å–µ –ø—É—Ç–∏ –≤–µ–¥—É—Ç –≤ END —è–≤–Ω–æ)
            # –û–¥–Ω–∞–∫–æ, –µ—Å–ª–∏ –≤—Å–µ —É–∑–ª—ã, –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –≤–µ–¥—É—Ç –≤ END, —Ç–æ astream —Å–∞–º –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è.
            current_graph_state_after_stream = await compiled_agent.aget_state(config)
            if (
                current_graph_state_after_stream
                and not current_graph_state_after_stream.next
            ):
                logger.info(
                    f"LangGraph conversation for thread_id {thread_id} (chat_id {chat_id}) reached END state."
                )
                # –†–µ—à–µ–Ω–∏–µ –æ —Å–±—Ä–æ—Å–µ —Å–µ—Å—Å–∏–∏ user_sessions[chat_id] –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω—ã–º,
                # —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞—Ö–æ—Ç–µ—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–æ–≥–æ –∂–µ –º–µ—Å—Ç–∞, –µ—Å–ª–∏ –∞–≥–µ–Ω—Ç –Ω–µ —Å–∫–∞–∑–∞–ª "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è".
                # –°–±—Ä–æ—Å –ª—É—á—à–µ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start –∏–ª–∏ –µ—Å–ª–∏ –∞–≥–µ–Ω—Ç —è–≤–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–∫–∞–∑–∞–ª "–†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å").
                if agent_response_text and "–†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å" in agent_response_text:
                    if chat_id in user_sessions:
                        del user_sessions[chat_id]
                        logger.info(
                            f"Session for chat_id {chat_id} (thread_id {thread_id}) cleared after finalization."
                        )
        else:
            logger.error(
                f"No final output from agent for thread_id {thread_id} after astream."
            )
            agent_response_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–≥–µ–Ω—Ç–∞)."

    except GraphRecursionError as r_err:
        logger.error(
            f"GraphRecursionError for chat_id {chat_id} (thread_id {thread_id}): {r_err}",
            exc_info=True,
        )
        agent_response_text = "–ö–∞–∂–µ—Ç—Å—è, —è –∑–∞–ø—É—Ç–∞–ª—Å—è –≤ —Å–≤–æ–∏—Ö –º—ã—Å–ª—è—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å."
        if chat_id in user_sessions:
            del user_sessions[chat_id]
            logger.info(
                f"Session for chat_id {chat_id} (thread_id {thread_id}) cleared due to recursion error."
            )
    except Exception as e:
        logger.error(
            f"Error processing message for chat_id {chat_id} (thread_id {thread_id}): {e}",
            exc_info=True,
        )
        agent_response_text = (
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

    logger.info(
        f"Agent response for chat_id {chat_id}: '{str(agent_response_text)[:200]}'"
    )
    return agent_response_text


async def start_command_handler(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    chat_id = update.message.chat_id
    logger.info(f"/start command received from chat_id {chat_id}")

    if chat_id in user_sessions:
        thread_id_to_clear = user_sessions[chat_id]
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –º–æ–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –¥–ª—è —ç—Ç–æ–≥–æ thread_id, –µ—Å–ª–∏ LangGraph —ç—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç
        # config = {"configurable": {"thread_id": thread_id_to_clear}}
        # await compiled_agent.update_state(config, None) # –≠—Ç–æ —Å–±—Ä–æ—Å–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        # –õ–∏–±–æ –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –Ω–∞—à–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è, —á—Ç–æ–±—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å–æ–∑–¥–∞–ª—Å—è –Ω–æ–≤—ã–π
        del user_sessions[chat_id]
        logger.info(
            f"Session for chat_id {chat_id} (thread_id {thread_id_to_clear}) cleared due to /start command."
        )

    await update.message.reply_text(
    "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. üòä\n\n"
    "–ß—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, —É—Ç–æ—á–Ω–∏—Ç–µ –¥–µ—Ç–∞–ª–∏:\n\n"
    "üìç <b>–ì–æ—Ä–æ–¥</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥)\n"
    "üìÖ <b>–î–∞—Ç–∞</b> (—Å–µ–≥–æ–¥–Ω—è, –∑–∞–≤—Ç—Ä–∞, 15 –∏—é–Ω—è –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç)\n"
    "‚è∞ <b>–í—Ä–µ–º—è</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: –≤–µ—á–µ—Ä, —Å 19:00, –∏–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª 14:00-17:00)\n"
    "üé≠ <b>–ò–Ω—Ç–µ—Ä–µ—Å—ã</b> (–∫–∏–Ω–æ, –∫–æ–Ω—Ü–µ—Ä—Ç, —Ç–µ–∞—Ç—Ä, –≤—ã—Å—Ç–∞–≤–∫–∞, —Ñ–µ—Å—Ç–∏–≤–∞–ª—å, —Å—Ç–µ–Ω–¥–∞–ø, —Ä–µ—Å—Ç–æ—Ä–∞–Ω –∏ —Ç.–¥.)\n"
    "üí∞ <b>–ë—é–¥–∂–µ—Ç</b> –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞/–∫–æ–º–ø–∞–Ω–∏—é (–ø—Ä–∏–º–µ—Ä: –¥–æ 2000 ‚ÇΩ, 5000-10000 ‚ÇΩ)\n\n"
    "–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:\n"
    "<i>\"–ò—â—É –∫–æ–Ω—Ü–µ—Ä—Ç –≤ –ú–æ—Å–∫–≤–µ 20 –∏—é–ª—è –≤–µ—á–µ—Ä–æ–º, –±—é–¥–∂–µ—Ç –¥–æ 5000 ‚ÇΩ\"</i>\n\n"
    "–ì–æ—Ç–æ–≤ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫—Ä—É—Ç—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã! üéâ"
)


async def telegram_message_handler_wrapper(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    if update.message and update.message.text:
        chat_id = update.message.chat_id
        user_text = update.message.text

        # –ù–µ –ª–æ–≥–≥–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —Ç.–∫. handle_telegram_message —É–∂–µ –ª–æ–≥–≥–∏—Ä—É–µ—Ç
        # logger.info(f"Received Telegram message from chat_id {chat_id}: '{user_text}'")

        await context.bot.send_chat_action(chat_id=chat_id, action="typing")
        bot_reply = await handle_telegram_message(chat_id, user_text)

        if bot_reply:
            await update.message.reply_text(bot_reply)
        else:
            logger.warning(
                f"Bot reply was empty for chat_id {chat_id} (message: '{user_text}'). Sending default error message."
            )
            await update.message.reply_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )


if __name__ == "__main__":
    TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    if not TELEGRAM_BOT_TOKEN:
        logger.error(
            "TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!"
        )
        exit()

    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start_command_handler))
    application.add_handler(
        MessageHandler(
            filters.TEXT & ~filters.COMMAND, telegram_message_handler_wrapper
        )
    )

    logger.info("Telegram bot starting polling...")
    try:
        application.run_polling()
    except Exception as e:
        logger.critical(
            f"Telegram bot failed to start or polling error: {e}", exc_info=True
        )
    logger.info("Telegram bot stopped.")
