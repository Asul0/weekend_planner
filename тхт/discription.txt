Skip to content
What's new â€” we've launched Pydantic Logfire ðŸ”¥ to help you monitor and understand your Postgres qu
Pydantic
2.11
Fields



logoPydantic
 pydantic/pydantic
v2.11.4
23.9k
2.1k
Get Started
Get Started
Welcome to Pydantic
Why use Pydantic
Help with Pydantic
Installation
Migration Guide
Version Policy
Contributing
Changelog
Concepts
Concepts
Models
Fields
JSON Schema
JSON
Types
Unions
Alias
Configuration
Serialization
Validators
Dataclasses
Forward Annotations
Strict Mode
Type Adapter
Validation Decorator
Conversion Table
Settings Management
Performance
Experimental
API Documentation
API Documentation
Pydantic
Pydantic
BaseModel
RootModel
Pydantic Dataclasses
TypeAdapter
Validate Call
Fields
Page contents
fields
Field
FieldInfo
from_field
from_annotation
from_annotated_attribute
merge_field_infos
deprecation_message
default_factory_takes_validated_data
get_default
is_required
rebuild_annotation
apply_typevars_map
PrivateAttr
ModelPrivateAttr
get_default
computed_field
ComputedFieldInfo
deprecation_message
Aliases
Configuration
JSON Schema
Errors
Functional Validators
Functional Serializers
Standard Library Types
Pydantic Types
Network Types
Version Information
Annotated Handlers
Experimental
Pydantic Core
Pydantic Core
pydantic_core
pydantic_core.core_schema
Pydantic Settings
Pydantic Extra Types
Pydantic Extra Types
Color
Country
Payment
Phone Numbers
Routing Numbers
Coordinate
Mac Address
ISBN
Pendulum
Currency
Language
Script Code
Semantic Version
Timezone Name
ULID
Internals
Internals
Architecture
Resolving Annotations
Examples
Examples
Validating File Data
Web and API Requests
Queues
Databases
Custom Validators
Error Messages
Error Messages
Error Handling
Validation Errors
Usage Errors
Integrations
Integrations
Pydantic Logfire
LLMs
Dev Tools
Dev Tools
Mypy
PyCharm
Hypothesis
Visual Studio Code
datamodel-code-generator
devtools
Rich
Linting
Documentation
Production Tools
Production Tools
AWS Lambda
Blog
Pydantic People
Fields
Defining fields on models.

Field Â¶

Field(
    default: ellipsis,
    *,
    alias: str | None = _Unset,
    alias_priority: int | None = _Unset,
    validation_alias: (
        str | AliasPath | AliasChoices | None
    ) = _Unset,
    serialization_alias: str | None = _Unset,
    title: str | None = _Unset,
    field_title_generator: (
        Callable[[str, FieldInfo], str] | None
    ) = _Unset,
    description: str | None = _Unset,
    examples: list[Any] | None = _Unset,
    exclude: bool | None = _Unset,
    discriminator: str | Discriminator | None = _Unset,
    deprecated: Deprecated | str | bool | None = _Unset,
    json_schema_extra: (
        JsonDict | Callable[[JsonDict], None] | None
    ) = _Unset,
    frozen: bool | None = _Unset,
    validate_default: bool | None = _Unset,
    repr: bool = _Unset,
    init: bool | None = _Unset,
    init_var: bool | None = _Unset,
    kw_only: bool | None = _Unset,
    pattern: str | Pattern[str] | None = _Unset,
    strict: bool | None = _Unset,
    coerce_numbers_to_str: bool | None = _Unset,
    gt: SupportsGt | None = _Unset,
    ge: SupportsGe | None = _Unset,
    lt: SupportsLt | None = _Unset,
    le: SupportsLe | None = _Unset,
    multiple_of: float | None = _Unset,
    allow_inf_nan: bool | None = _Unset,
    max_digits: int | None = _Unset,
    decimal_places: int | None = _Unset,
    min_length: int | None = _Unset,
    max_length: int | None = _Unset,
    union_mode: Literal["smart", "left_to_right"] = _Unset,
    fail_fast: bool | None = _Unset,
    **extra: Unpack[_EmptyKwargs]
) -> Any


Field(
    default: _T" optional hover>_T,
    *,
    alias: str | None = _Unset,
    alias_priority: int | None = _Unset,
    validation_alias: (
        str | AliasPath | AliasChoices | None
    ) = _Unset,
    serialization_alias: str | None = _Unset,
    title: str | None = _Unset,
    field_title_generator: (
        Callable[[str, FieldInfo], str] | None
    ) = _Unset,
    description: str | None = _Unset,
    examples: list[Any] | None = _Unset,
    exclude: bool | None = _Unset,
    discriminator: str | Discriminator | None = _Unset,
    deprecated: Deprecated | str | bool | None = _Unset,
    json_schema_extra: (
        JsonDict | Callable[[JsonDict], None] | None
    ) = _Unset,
    frozen: bool | None = _Unset,
    validate_default: bool | None = _Unset,
    repr: bool = _Unset,
    init: bool | None = _Unset,
    init_var: bool | None = _Unset,
    kw_only: bool | None = _Unset,
    pattern: str | Pattern[str] | None = _Unset,
    strict: bool | None = _Unset,
    coerce_numbers_to_str: bool | None = _Unset,
    gt: SupportsGt | None = _Unset,
    ge: SupportsGe | None = _Unset,
    lt: SupportsLt | None = _Unset,
    le: SupportsLe | None = _Unset,
    multiple_of: float | None = _Unset,
    allow_inf_nan: bool | None = _Unset,
    max_digits: int | None = _Unset,
    decimal_places: int | None = _Unset,
    min_length: int | None = _Unset,
    max_length: int | None = _Unset,
    union_mode: Literal["smart", "left_to_right"] = _Unset,
    fail_fast: bool | None = _Unset,
    **extra: Unpack[_EmptyKwargs]
) -> _T


Field(
    *,
    default_factory: (
        Callable[[], _T] | Callable[[dict[str, Any]], _T]
    ),
    alias: str | None = _Unset,
    alias_priority: int | None = _Unset,
    validation_alias: (
        str | AliasPath | AliasChoices | None
    ) = _Unset,
    serialization_alias: str | None = _Unset,
    title: str | None = _Unset,
    field_title_generator: (
        Callable[[str, FieldInfo], str] | None
    ) = _Unset,
    description: str | None = _Unset,
    examples: list[Any] | None = _Unset,
    exclude: bool | None = _Unset,
    discriminator: str | Discriminator | None = _Unset,
    deprecated: Deprecated | str | bool | None = _Unset,
    json_schema_extra: (
        JsonDict | Callable[[JsonDict], None] | None
    ) = _Unset,
    frozen: bool | None = _Unset,
    validate_default: bool | None = _Unset,
    repr: bool = _Unset,
    init: bool | None = _Unset,
    init_var: bool | None = _Unset,
    kw_only: bool | None = _Unset,
    pattern: str | Pattern[str] | None = _Unset,
    strict: bool | None = _Unset,
    coerce_numbers_to_str: bool | None = _Unset,
    gt: SupportsGt | None = _Unset,
    ge: SupportsGe | None = _Unset,
    lt: SupportsLt | None = _Unset,
    le: SupportsLe | None = _Unset,
    multiple_of: float | None = _Unset,
    allow_inf_nan: bool | None = _Unset,
    max_digits: int | None = _Unset,
    decimal_places: int | None = _Unset,
    min_length: int | None = _Unset,
    max_length: int | None = _Unset,
    union_mode: Literal["smart", "left_to_right"] = _Unset,
    fail_fast: bool | None = _Unset,
    **extra: Unpack[_EmptyKwargs]
) -> _T


Field(
    *,
    alias: str | None = _Unset,
    alias_priority: int | None = _Unset,
    validation_alias: (
        str | AliasPath | AliasChoices | None
    ) = _Unset,
    serialization_alias: str | None = _Unset,
    title: str | None = _Unset,
    field_title_generator: (
        Callable[[str, FieldInfo], str] | None
    ) = _Unset,
    description: str | None = _Unset,
    examples: list[Any] | None = _Unset,
    exclude: bool | None = _Unset,
    discriminator: str | Discriminator | None = _Unset,
    deprecated: Deprecated | str | bool | None = _Unset,
    json_schema_extra: (
        JsonDict | Callable[[JsonDict], None] | None
    ) = _Unset,
    frozen: bool | None = _Unset,
    validate_default: bool | None = _Unset,
    repr: bool = _Unset,
    init: bool | None = _Unset,
    init_var: bool | None = _Unset,
    kw_only: bool | None = _Unset,
    pattern: str | Pattern[str] | None = _Unset,
    strict: bool | None = _Unset,
    coerce_numbers_to_str: bool | None = _Unset,
    gt: SupportsGt | None = _Unset,
    ge: SupportsGe | None = _Unset,
    lt: SupportsLt | None = _Unset,
    le: SupportsLe | None = _Unset,
    multiple_of: float | None = _Unset,
    allow_inf_nan: bool | None = _Unset,
    max_digits: int | None = _Unset,
    decimal_places: int | None = _Unset,
    min_length: int | None = _Unset,
    max_length: int | None = _Unset,
    union_mode: Literal["smart", "left_to_right"] = _Unset,
    fail_fast: bool | None = _Unset,
    **extra: Unpack[_EmptyKwargs]
) -> Any


Field(
    default: Any = PydanticUndefined,
    *,
    default_factory: (
        Callable[[], Any]
        | Callable[[dict[str, Any]], Any]
        | None
    ) = _Unset,
    alias: str | None = _Unset,
    alias_priority: int | None = _Unset,
    validation_alias: (
        str | AliasPath | AliasChoices | None
    ) = _Unset,
    serialization_alias: str | None = _Unset,
    title: str | None = _Unset,
    field_title_generator: (
        Callable[[str, FieldInfo], str] | None
    ) = _Unset,
    description: str | None = _Unset,
    examples: list[Any] | None = _Unset,
    exclude: bool | None = _Unset,
    discriminator: str | Discriminator | None = _Unset,
    deprecated: Deprecated | str | bool | None = _Unset,
    json_schema_extra: (
        JsonDict | Callable[[JsonDict], None] | None
    ) = _Unset,
    frozen: bool | None = _Unset,
    validate_default: bool | None = _Unset,
    repr: bool = _Unset,
    init: bool | None = _Unset,
    init_var: bool | None = _Unset,
    kw_only: bool | None = _Unset,
    pattern: str | Pattern[str] | None = _Unset,
    strict: bool | None = _Unset,
    coerce_numbers_to_str: bool | None = _Unset,
    gt: SupportsGt | None = _Unset,
    ge: SupportsGe | None = _Unset,
    lt: SupportsLt | None = _Unset,
    le: SupportsLe | None = _Unset,
    multiple_of: float | None = _Unset,
    allow_inf_nan: bool | None = _Unset,
    max_digits: int | None = _Unset,
    decimal_places: int | None = _Unset,
    min_length: int | None = _Unset,
    max_length: int | None = _Unset,
    union_mode: Literal["smart", "left_to_right"] = _Unset,
    fail_fast: bool | None = _Unset,
    **extra: Unpack[_EmptyKwargs]
) -> Any

Usage Documentation

Fields

Create a field for objects that can be configured.

Used to provide extra information about a field, either for the model schema or complex validation. Some arguments apply only to number fields (int, float, Decimal) and some apply only to str.

Note
Any _Unset objects will be replaced by the corresponding value defined in the _DefaultValues dictionary. If a key for the _Unset object is not found in the _DefaultValues dictionary, it will default to None
Parameters:

Name	Type	Description	Default
default	Any	Default value if the field is not set.	PydanticUndefined
default_factory	Callable[[], Any] | Callable[[dict[str, Any]], Any] | None	A callable to generate the default value. The callable can either take 0 arguments (in which case it is called as is) or a single argument containing the already validated data.	_Unset
alias	str | None	The name to use for the attribute when validating or serializing by alias. This is often used for things like converting between snake and camel case.	_Unset
alias_priority	int | None	Priority of the alias. This affects whether an alias generator is used.	_Unset
validation_alias	str | AliasPath | AliasChoices | None	Like alias, but only affects validation, not serialization.	_Unset
serialization_alias	str | None	Like alias, but only affects serialization, not validation.	_Unset
title	str | None	Human-readable title.	_Unset
field_title_generator	Callable[[str, FieldInfo], str] | None	A callable that takes a field name and returns title for it.	_Unset
description	str | None	Human-readable description.	_Unset
examples	list[Any] | None	Example values for this field.	_Unset
exclude	bool | None	Whether to exclude the field from the model serialization.	_Unset
discriminator	str | Discriminator | None	Field name or Discriminator for discriminating the type in a tagged union.	_Unset
deprecated	Deprecated | str | bool | None	A deprecation message, an instance of warnings.deprecated or the typing_extensions.deprecated backport, or a boolean. If True, a default deprecation message will be emitted when accessing the field.	_Unset
json_schema_extra	JsonDict | Callable[[JsonDict], None] | None	A dict or callable to provide extra JSON schema properties.	_Unset
frozen	bool | None	Whether the field is frozen. If true, attempts to change the value on an instance will raise an error.	_Unset
validate_default	bool | None	If True, apply validation to the default value every time you create an instance. Otherwise, for performance reasons, the default value of the field is trusted and not validated.	_Unset
repr	bool	A boolean indicating whether to include the field in the __repr__ output.	_Unset
init	bool | None	Whether the field should be included in the constructor of the dataclass. (Only applies to dataclasses.)	_Unset
init_var	bool | None	Whether the field should only be included in the constructor of the dataclass. (Only applies to dataclasses.)	_Unset
kw_only	bool | None	Whether the field should be a keyword-only argument in the constructor of the dataclass. (Only applies to dataclasses.)	_Unset
coerce_numbers_to_str	bool | None	Whether to enable coercion of any Number type to str (not applicable in strict mode).	_Unset
strict	bool | None	If True, strict validation is applied to the field. See Strict Mode for details.	_Unset
gt	SupportsGt | None	Greater than. If set, value must be greater than this. Only applicable to numbers.	_Unset
ge	SupportsGe | None	Greater than or equal. If set, value must be greater than or equal to this. Only applicable to numbers.	_Unset
lt	SupportsLt | None	Less than. If set, value must be less than this. Only applicable to numbers.	_Unset
le	SupportsLe | None	Less than or equal. If set, value must be less than or equal to this. Only applicable to numbers.	_Unset
multiple_of	float | None	Value must be a multiple of this. Only applicable to numbers.	_Unset
min_length	int | None	Minimum length for iterables.	_Unset
max_length	int | None	Maximum length for iterables.	_Unset
pattern	str | Pattern[str] | None	Pattern for strings (a regular expression).	_Unset
allow_inf_nan	bool | None	Allow inf, -inf, nan. Only applicable to float and Decimal numbers.	_Unset
max_digits	int | None	Maximum number of allow digits for strings.	_Unset
decimal_places	int | None	Maximum number of decimal places allowed for numbers.	_Unset
union_mode	Literal['smart', 'left_to_right']	The strategy to apply when validating a union. Can be smart (the default), or left_to_right. See Union Mode for details.	_Unset
fail_fast	bool | None	If True, validation will stop on the first error. If False, all validation errors will be collected. This option can be applied only to iterable types (list, tuple, set, and frozenset).	_Unset
extra	Unpack[_EmptyKwargs]	(Deprecated) Extra fields that will be included in the JSON schema.
Warning

The extra kwargs is deprecated. Use json_schema_extra instead.

{}
Returns:

Type	Description
Any	A new FieldInfo. The return annotation is Any so Field can be used on type-annotated fields without causing a type error.
Source code in pydantic/fields.py
FieldInfo Â¶

FieldInfo(**kwargs: Unpack[_FieldInfoInputs])
Bases: Representation

This class holds information about a field.

FieldInfo is used for any field definition regardless of whether the Field() function is explicitly used.

Warning

You generally shouldn't be creating FieldInfo directly, you'll only need to use it when accessing BaseModel .model_fields internals.

Attributes:

Name	Type	Description
annotation	type[Any] | None	The type annotation of the field.
default	Any	The default value of the field.
default_factory	Callable[[], Any] | Callable[[dict[str, Any]], Any] | None	A callable to generate the default value. The callable can either take 0 arguments (in which case it is called as is) or a single argument containing the already validated data.
alias	str | None	The alias name of the field.
alias_priority	int | None	The priority of the field's alias.
validation_alias	str | AliasPath | AliasChoices | None	The validation alias of the field.
serialization_alias	str | None	The serialization alias of the field.
title	str | None	The title of the field.
field_title_generator	Callable[[str, FieldInfo], str] | None	A callable that takes a field name and returns title for it.
description	str | None	The description of the field.
examples	list[Any] | None	List of examples of the field.
exclude	bool | None	Whether to exclude the field from the model serialization.
discriminator	str | Discriminator | None	Field name or Discriminator for discriminating the type in a tagged union.
deprecated	Deprecated | str | bool | None	A deprecation message, an instance of warnings.deprecated or the typing_extensions.deprecated backport, or a boolean. If True, a default deprecation message will be emitted when accessing the field.
json_schema_extra	JsonDict | Callable[[JsonDict], None] | None	A dict or callable to provide extra JSON schema properties.
frozen	bool | None	Whether the field is frozen.
validate_default	bool | None	Whether to validate the default value of the field.
repr	bool	Whether to include the field in representation of the model.
init	bool | None	Whether the field should be included in the constructor of the dataclass.
init_var	bool | None	Whether the field should only be included in the constructor of the dataclass, and not stored.
kw_only	bool | None	Whether the field should be a keyword-only argument in the constructor of the dataclass.
metadata	list[Any]	List of metadata constraints.
See the signature of pydantic.fields.Field for more details about the expected arguments.

Source code in pydantic/fields.py
from_field staticmethod Â¶

from_field(
    default: Any = PydanticUndefined,
    **kwargs: Unpack[_FromFieldInfoInputs]
) -> FieldInfo
Create a new FieldInfo object with the Field function.

Parameters:

Name	Type	Description	Default
default	Any	The default value for the field. Defaults to Undefined.	PydanticUndefined
**kwargs	Unpack[_FromFieldInfoInputs]	Additional arguments dictionary.	{}
Raises:

Type	Description
TypeError	If 'annotation' is passed as a keyword argument.
Returns:

Type	Description
FieldInfo	A new FieldInfo object with the given parameters.
Example
This is how you can create a field with default value like this:


import pydantic

class MyModel(pydantic.BaseModel):
    foo: int = pydantic.Field(4)
Source code in pydantic/fields.py
from_annotation staticmethod Â¶

from_annotation(
    annotation: type[Any],
    *,
    _source: AnnotationSource = ANY
) -> FieldInfo
Creates a FieldInfo instance from a bare annotation.

This function is used internally to create a FieldInfo from a bare annotation like this:


import pydantic

class MyModel(pydantic.BaseModel):
    foo: int  # <-- like this
We also account for the case where the annotation can be an instance of Annotated and where one of the (not first) arguments in Annotated is an instance of FieldInfo, e.g.:


from typing import Annotated

import annotated_types

import pydantic

class MyModel(pydantic.BaseModel):
    foo: Annotated[int, annotated_types.Gt(42)]
    bar: Annotated[int, pydantic.Field(gt=42)]
Parameters:

Name	Type	Description	Default
annotation	type[Any]	An annotation object.	required
Returns:

Type	Description
FieldInfo	An instance of the field metadata.
Source code in pydantic/fields.py
from_annotated_attribute staticmethod Â¶

from_annotated_attribute(
    annotation: type[Any],
    default: Any,
    *,
    _source: AnnotationSource = ANY
) -> FieldInfo
Create FieldInfo from an annotation with a default value.

This is used in cases like the following:


from typing import Annotated

import annotated_types

import pydantic

class MyModel(pydantic.BaseModel):
    foo: int = 4  # <-- like this
    bar: Annotated[int, annotated_types.Gt(4)] = 4  # <-- or this
    spam: Annotated[int, pydantic.Field(gt=4)] = 4  # <-- or this
Parameters:

Name	Type	Description	Default
annotation	type[Any]	The type annotation of the field.	required
default	Any	The default value of the field.	required
Returns:

Type	Description
FieldInfo	A field object with the passed values.
Source code in pydantic/fields.py
merge_field_infos staticmethod Â¶

merge_field_infos(
    *field_infos: FieldInfo, **overrides: Any
) -> FieldInfo
Merge FieldInfo instances keeping only explicitly set attributes.

Later FieldInfo instances override earlier ones.

Returns:

Name	Type	Description
FieldInfo	FieldInfo	A merged FieldInfo instance.
Source code in pydantic/fields.py
deprecation_message property Â¶

deprecation_message: str | None
The deprecation message to be emitted, or None if not set.

default_factory_takes_validated_data property Â¶

default_factory_takes_validated_data: bool | None
Whether the provided default factory callable has a validated data parameter.

Returns None if no default factory is set.

get_default Â¶

get_default(
    *,
    call_default_factory: Literal[True],
    validated_data: dict[str, Any] | None = None
) -> Any

get_default(
    *, call_default_factory: Literal[False] = ...
) -> Any

get_default(
    *,
    call_default_factory: bool = False,
    validated_data: dict[str, Any] | None = None
) -> Any
Get the default value.

We expose an option for whether to call the default_factory (if present), as calling it may result in side effects that we want to avoid. However, there are times when it really should be called (namely, when instantiating a model via model_construct).

Parameters:

Name	Type	Description	Default
call_default_factory	bool	Whether to call the default factory or not.	False
validated_data	dict[str, Any] | None	The already validated data to be passed to the default factory.	None
Returns:

Type	Description
Any	The default value, calling the default factory if requested or None if not set.
Source code in pydantic/fields.py
is_required Â¶

is_required() -> bool
Check if the field is required (i.e., does not have a default value or factory).

Returns:

Type	Description
bool	True if the field is required, False otherwise.
Source code in pydantic/fields.py
rebuild_annotation Â¶

rebuild_annotation() -> Any
Attempts to rebuild the original annotation for use in function signatures.

If metadata is present, it adds it to the original annotation using Annotated. Otherwise, it returns the original annotation as-is.

Note that because the metadata has been flattened, the original annotation may not be reconstructed exactly as originally provided, e.g. if the original type had unrecognized annotations, or was annotated with a call to pydantic.Field.

Returns:

Type	Description
Any	The rebuilt annotation.
Source code in pydantic/fields.py
apply_typevars_map Â¶

apply_typevars_map(
    typevars_map: Mapping[TypeVar, Any] | None,
    globalns: GlobalsNamespace | None = None,
    localns: MappingNamespace | None = None,
) -> None
Apply a typevars_map to the annotation.

This method is used when analyzing parametrized generic types to replace typevars with their concrete types.

This method applies the typevars_map to the annotation in place.

Parameters:

Name	Type	Description	Default
typevars_map	Mapping[TypeVar, Any] | None	A dictionary mapping type variables to their concrete types.	required
globalns	GlobalsNamespace | None	The globals namespace to use during type annotation evaluation.	None
localns	MappingNamespace | None	The locals namespace to use during type annotation evaluation.	None
See Also
pydantic._internal._generics.replace_types is used for replacing the typevars with their concrete types.

Source code in pydantic/fields.py
PrivateAttr Â¶

PrivateAttr(
    default: _T, *, init: Literal[False] = False
) -> _T

PrivateAttr(
    *,
    default_factory: Callable[[], _T],
    init: Literal[False] = False
) -> _T

PrivateAttr(*, init: Literal[False] = False) -> Any

PrivateAttr(
    default: Any = PydanticUndefined,
    *,
    default_factory: Callable[[], Any] | None = None,
    init: Literal[False] = False
) -> Any
Usage Documentation

Private Model Attributes

Indicates that an attribute is intended for private use and not handled during normal validation/serialization.

Private attributes are not validated by Pydantic, so it's up to you to ensure they are used in a type-safe manner.

Private attributes are stored in __private_attributes__ on the model.

Parameters:

Name	Type	Description	Default
default	Any	The attribute's default value. Defaults to Undefined.	PydanticUndefined
default_factory	Callable[[], Any] | None	Callable that will be called when a default value is needed for this attribute. If both default and default_factory are set, an error will be raised.	None
init	Literal[False]	Whether the attribute should be included in the constructor of the dataclass. Always False.	False
Returns:

Type	Description
Any	An instance of ModelPrivateAttr class.
Raises:

Type	Description
ValueError	If both default and default_factory are set.
Source code in pydantic/fields.py
ModelPrivateAttr Â¶

ModelPrivateAttr(
    default: Any = PydanticUndefined,
    *,
    default_factory: Callable[[], Any] | None = None
)
Bases: Representation

A descriptor for private attributes in class models.

Warning

You generally shouldn't be creating ModelPrivateAttr instances directly, instead use pydantic.fields.PrivateAttr. (This is similar to FieldInfo vs. Field.)

Attributes:

Name	Type	Description
default		The default value of the attribute if not provided.
default_factory		A callable function that generates the default value of the attribute if not provided.
Source code in pydantic/fields.py
get_default Â¶

get_default() -> Any
Retrieve the default value of the object.

If self.default_factory is None, the method will return a deep copy of the self.default object.

If self.default_factory is not None, it will call self.default_factory and return the value returned.

Returns:

Type	Description
Any	The default value of the object.
Source code in pydantic/fields.py
computed_field Â¶

computed_field(func: PropertyT) -> PropertyT

computed_field(
    *,
    alias: str | None = None,
    alias_priority: int | None = None,
    title: str | None = None,
    field_title_generator: (
        Callable[[str, ComputedFieldInfo], str] | None
    ) = None,
    description: str | None = None,
    deprecated: Deprecated | str | bool | None = None,
    examples: list[Any] | None = None,
    json_schema_extra: (
        JsonDict | Callable[[JsonDict], None] | None
    ) = None,
    repr: bool = True,
    return_type: Any = PydanticUndefined
) -> Callable[[PropertyT], PropertyT]

computed_field(
    func: PropertyT | None = None,
    /,
    *,
    alias: str | None = None,
    alias_priority: int | None = None,
    title: str | None = None,
    field_title_generator: (
        Callable[[str, ComputedFieldInfo], str] | None
    ) = None,
    description: str | None = None,
    deprecated: Deprecated | str | bool | None = None,
    examples: list[Any] | None = None,
    json_schema_extra: (
        JsonDict | Callable[[JsonDict], None] | None
    ) = None,
    repr: bool | None = None,
    return_type: Any = PydanticUndefined,
) -> PropertyT | Callable[[PropertyT], PropertyT]
Usage Documentation

The computed_field decorator

Decorator to include property and cached_property when serializing models or dataclasses.

This is useful for fields that are computed from other fields, or for fields that are expensive to compute and should be cached.


from pydantic import BaseModel, computed_field

class Rectangle(BaseModel):
    width: int
    length: int

    @computed_field
    @property
    def area(self) -> int:
        return self.width * self.length

print(Rectangle(width=3, length=2).model_dump())
#> {'width': 3, 'length': 2, 'area': 6}
If applied to functions not yet decorated with @property or @cached_property, the function is automatically wrapped with property. Although this is more concise, you will lose IntelliSense in your IDE, and confuse static type checkers, thus explicit use of @property is recommended.

Mypy Warning

Even with the @property or @cached_property applied to your function before @computed_field, mypy may throw a Decorated property not supported error. See mypy issue #1362, for more information. To avoid this error message, add # type: ignore[prop-decorator] to the @computed_field line.

pyright supports @computed_field without error.


import random

from pydantic import BaseModel, computed_field

class Square(BaseModel):
    width: float

    @computed_field
    def area(self) -> float:  # converted to a `property` by `computed_field`
        return round(self.width**2, 2)

    @area.setter
    def area(self, new_area: float) -> None:
        self.width = new_area**0.5

    @computed_field(alias='the magic number', repr=False)
    def random_number(self) -> int:
        return random.randint(0, 1_000)

square = Square(width=1.3)

# `random_number` does not appear in representation
print(repr(square))
#> Square(width=1.3, area=1.69)

print(square.random_number)
#> 3

square.area = 4

print(square.model_dump_json(by_alias=True))
#> {"width":2.0,"area":4.0,"the magic number":3}
Overriding with computed_field

You can't override a field from a parent class with a computed_field in the child class. mypy complains about this behavior if allowed, and dataclasses doesn't allow this pattern either. See the example below:


from pydantic import BaseModel, computed_field

class Parent(BaseModel):
    a: str

try:

    class Child(Parent):
        @computed_field
        @property
        def a(self) -> str:
            return 'new a'

except TypeError as e:
    print(e)
    '''
    Field 'a' of class 'Child' overrides symbol of same name in a parent class. This override with a computed_field is incompatible.
    '''
Private properties decorated with @computed_field have repr=False by default.


from functools import cached_property

from pydantic import BaseModel, computed_field

class Model(BaseModel):
    foo: int

    @computed_field
    @cached_property
    def _private_cached_property(self) -> int:
        return -self.foo

    @computed_field
    @property
    def _private_property(self) -> int:
        return -self.foo

m = Model(foo=1)
print(repr(m))
#> Model(foo=1)
Parameters:

Name	Type	Description	Default
func	PropertyT | None	the function to wrap.	None
alias	str | None	alias to use when serializing this computed field, only used when by_alias=True	None
alias_priority	int | None	priority of the alias. This affects whether an alias generator is used	None
title	str | None	Title to use when including this computed field in JSON Schema	None
field_title_generator	Callable[[str, ComputedFieldInfo], str] | None	A callable that takes a field name and returns title for it.	None
description	str | None	Description to use when including this computed field in JSON Schema, defaults to the function's docstring	None
deprecated	Deprecated | str | bool | None	A deprecation message (or an instance of warnings.deprecated or the typing_extensions.deprecated backport). to be emitted when accessing the field. Or a boolean. This will automatically be set if the property is decorated with the deprecated decorator.	None
examples	list[Any] | None	Example values to use when including this computed field in JSON Schema	None
json_schema_extra	JsonDict | Callable[[JsonDict], None] | None	A dict or callable to provide extra JSON schema properties.	None
repr	bool | None	whether to include this computed field in model repr. Default is False for private properties and True for public properties.	None
return_type	Any	optional return for serialization logic to expect when serializing to JSON, if included this must be correct, otherwise a TypeError is raised. If you don't include a return type Any is used, which does runtime introspection to handle arbitrary objects.	PydanticUndefined
Returns:

Type	Description
PropertyT | Callable[[PropertyT], PropertyT]	A proxy wrapper for the property.
Source code in pydantic/fields.py
ComputedFieldInfo dataclass Â¶

ComputedFieldInfo(
    wrapped_property: property,
    return_type: Any,
    alias: str | None,
    alias_priority: int | None,
    title: str | None,
    field_title_generator: (
        Callable[[str, ComputedFieldInfo], str] | None
    ),
    description: str | None,
    deprecated: Deprecated | str | bool | None,
    examples: list[Any] | None,
    json_schema_extra: (
        JsonDict | Callable[[JsonDict], None] | None
    ),
    repr: bool,
)
A container for data from @computed_field so that we can access it while building the pydantic-core schema.

Attributes:

Name	Type	Description
decorator_repr	str	A class variable representing the decorator string, '@computed_field'.
wrapped_property	property	The wrapped computed field property.
return_type	Any	The type of the computed field property's return value.
alias	str | None	The alias of the property to be used during serialization.
alias_priority	int | None	The priority of the alias. This affects whether an alias generator is used.
title	str | None	Title of the computed field to include in the serialization JSON schema.
field_title_generator	Callable[[str, ComputedFieldInfo], str] | None	A callable that takes a field name and returns title for it.
description	str | None	Description of the computed field to include in the serialization JSON schema.
deprecated	Deprecated | str | bool | None	A deprecation message, an instance of warnings.deprecated or the typing_extensions.deprecated backport, or a boolean. If True, a default deprecation message will be emitted when accessing the field.
examples	list[Any] | None	Example values of the computed field to include in the serialization JSON schema.
json_schema_extra	JsonDict | Callable[[JsonDict], None] | None	A dict or callable to provide extra JSON schema properties.
repr	bool	A boolean indicating whether to include the field in the repr output.
deprecation_message property Â¶

deprecation_message: str | None
The deprecation message to be emitted, or None if not set.

Was this page helpful?


 Back to top
Made with Material for MkDocs
